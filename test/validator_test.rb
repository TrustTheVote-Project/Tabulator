#!/usr/bin/ruby

# OSDV Tabulator - TTV Tabulator Unit Tests
# Author: Jeff Cook
# Date: 2/2/2011
#
# License Version: OSDV Public License 1.2
#
# The contents of this file are subject to the OSDV Public License
# Version 1.2 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.osdv.org/license/
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.

# The Original Code is: TTV Tabulator
# The Initial Developer of the Original Code is Open Source Digital Voting Foundation.
# Portions created by Open Source Digital Voting Foundation are Copyright (C) 2010, 2011.
# All Rights Reserved.

# Contributors: Jeff Cook

require "yaml"
require "test/unit"
require "lib/syntax_checker"
require "lib/tabulator"

# The ValidatorTest class provides Unit Testing for the Tabulator Validator.
# It tests for all possible error and warning messages generated by the
# Tabulator during its data validation process.

class TabulatorValidatorTest < Test::Unit::TestCase

  TABULATOR_DATA_FILE = "TABULATOR_DATA.yml"

  JD_ERROR_2 = ["Non-Unique Precinct UID (PRECINCT_1) in Jurisdiction Definition",
                "Non-Unique District UID (DISTRICT_4) in Jurisdiction Definition"]

  JD_WARN_2 = ["Duplicate Precinct Declaration (PRECINCT_2) in Jurisdiction Definition",
                "Duplicate District Declaration (DISTRICT_3) in Jurisdiction Definition"]

  ED_ERROR_12 =
    ["Non-Existent Jurisdiction UID (JURISDICTION_11) in Election Definition",
     "Non-Unique Contest UID (CONTEST_1) in Election Definition",
     "Non-Existent District UID (DISTRICT_11) in Contest UID (CONTEST_3) in Election Definition",
     "Non-Unique Candidate UID (CANDIDATE_1) in Election Definition",
     "Non-Existent Contest UID (CONTEST_11) for Candidate UID (CANDIDATE_2) in Election Definition",
     "Non-Unique Question UID (QUESTION_1) in Election Definition",
     "Non-Existent District UID (DISTRICT_21) for Question UID (QUESTION_2) in Question",
     "Duplicate Answers (A, B, C, A, C, C) for Question UID (QUESTION_2) in Question",
     "Non-Unique Counter UID (COUNTER_1) in Election Definition",
     "Non-Existent Counter UID (COUNTER_11) in Expected Count",
     "Non-Existent Reporting Group (Bad One) for Counter UID (COUNTER_2) in Expected Count",
     "Non-Existent Precinct UID (PRECINCT_22) for Counter UID (COUNTER_2) in Expected Count"]

  ED_WARN_12_5 =
    ["Duplicate Contest Declaration (CONTEST_2) in Election Definition",
     "Duplicate Candidate Declaration (CANDIDATE_3) in Election Definition",
     "Duplicate Question Declaration (QUESTION_1) in Election Definition",
     "Duplicate Counter Declaration (COUNTER_2) in Election Definition",
     "Duplicate Reporting Group (Absentee) in Election Definition"]

  ED_WARN_2 =
    ["Missing ALL Reporting Groups, None Present in Election Definition",
     "Missing ALL Expected Counts, None Present in Election Definition"]

  ED_WARN_4 =
    ["Duplicate Expected Count (COUNTER_1, Normal, PRECINCT_1) in Election Definition",
     "Missing Counter UIDs (COUNTER_2) from Expected Counts",
     "Missing Reporting Groups (Absentee) from Expected Counts",
     "Missing Precinct UIDs (PRECINCT_2) from Expected Counts"]

  CC1_ERROR_4 =
    ["Non-Existent Counter UID (COUNTER_11) in Counter Count",
     "Non-Existent Precinct UID (PRECINCT_11) for Counter UID (COUNTER_11) in Counter Count",
     "Non-Existent Jurisdiction UID (JURISDICTION_11) for Counter UID (COUNTER_11) in Counter Count",
     "Non-Existent Election UID (ELECTION_11) for Counter UID (COUNTER_11) in Counter Count"]

  CC1_WARN_1 = ["Non-Existent Reporting Group (Unknown) for Counter UID (COUNTER_1) in Counter Count"]

  CC1_WARN_1A = ["Unexpected Counter UID (COUNTER_2) in Counter Count"]

  CC1_WARN_1B = ["Unexpected Reporting Group (Absentee) for Counter UID (COUNTER_1) in Counter Count"]

  CC1_WARN_1C = ["Unexpected Precinct UID (PRECINCT_2) for Counter UID (COUNTER_1) in Counter Count"]

  CC2_ERROR_1 = ["Non-Unique File UID (FILE_1) in Counter Count"]

  CC3_ERROR_13 =
    ["Non-Existent Contest UID (CONTEST_33) in Contest Count",
     "Duplicate Contest UID (CONTEST_1) in Contest Count",
     "Non-Existent Candidate UID (CANDIDATE_44) for Contest UID (CONTEST_2) in Contest Count",
     "Improper Candidate UID (CANDIDATE_1) for Contest UID (CONTEST_2) in Contest Count",
     "Duplicate Candidate UID (CANDIDATE_5) for Contest UID (CONTEST_2) in Contest Count",
     "Missing Candidate UIDs (CANDIDATE_4) for Contest UID (CONTEST_2) in Contest Count",
     "Missing Contest UIDs (CONTEST_3) in Contest Counts",
     "Non-Existent Question UID (QUESTION_11) in Question Count",
     "Duplicate Question UID (QUESTION_2) in Question Count",
     "Duplicate Answer (Foo) for Question UID (QUESTION_4) in Question Count",
     "Improper Answer (Bart) for Question UID (QUESTION_4) in Question Count",
     "Missing Answers (Bar, Doo) for Question UID (QUESTION_4) in Question Count",
     "Missing Question UIDs (QUESTION_1) in Question Counts"]

  CC4_ERROR_1 =
    ["Duplicate Counter Count (COUNTER_2, Normal, PRECINCT_2) Input to Tabulator"]
  CC4_WARN_1 =
    ["Unexpected Counter Count (COUNTER_2, Normal, PRECINCT_2) After Tabulator DONE"]

  ERRHEAD = "** ERROR **"
  WARHEAD = "** WARNING **"
  
# Tests for all possible error and warning messages generated by the Tabulator
# during its data validation process.

  def test_validator_errors_warnings
    trace = 300          # In case we need to trace, for debugging these tests
    dir = "data/Tests/Validation"
    valtest_tabulator_new(trace, dir, "JD.yml", "ED.yml", [], [])
    valtest_tabulator_new(trace, dir, "JD_ERROR_2.yml", "ED.yml", JD_ERROR_2, JD_WARN_2)
    valtest_tabulator_new(trace, dir, "JD.yml", "ED_ERROR_12.yml", ED_ERROR_12, ED_WARN_12_5)
    valtest_tabulator_new(trace, dir, "JD.yml", "ED_WARN_2.yml", [], ED_WARN_2)
    valtest_tabulator_new(trace, dir, "JD.yml", "ED_WARN_4.yml", [], ED_WARN_4)
    valtest_add_counter_count(trace, dir, "CC1_WARN_1A.yml", [], CC1_WARN_1A)
    valtest_add_counter_count(trace, dir, "CC1_WARN_1B.yml", [], CC1_WARN_1B)
    valtest_add_counter_count(trace, dir, "CC1_WARN_1C.yml", [], CC1_WARN_1C)
    valtest_tabulator_new(trace, dir, "JD.yml", "ED.yml", [], [])
    valtest_add_counter_count(trace, dir, "CC1_ERROR_4.yml", CC1_ERROR_4, [])
    valtest_tabulator_new(trace, dir, "JD.yml", "ED.yml", [], [])
    valtest_add_counter_count(trace, dir, "CC1_WARN_1.yml", [], CC1_WARN_1)
    valtest_tabulator_new(trace, dir, "JD.yml", "ED.yml", [], [])
    valtest_add_counter_count(trace, dir, "CC1.yml", [], [])
    valtest_add_counter_count(trace, dir, "CC2_ERROR_1.yml", CC2_ERROR_1, [])
    valtest_add_counter_count(trace, dir, "CC2.yml", [], [])
    valtest_add_counter_count(trace, dir, "CC3_ERROR_13.yml", CC3_ERROR_13, [])
    valtest_tabulator_new(trace, dir, "JD.yml", "ED.yml", [], [])
    valtest_add_counter_count(trace, dir, "CC1.yml", [], [])
    valtest_add_counter_count(trace, dir, "CC2.yml", [], [])
    valtest_add_counter_count(trace, dir, "CC3.yml", [], [])
    valtest_add_counter_count(trace, dir, "CC4_ERROR_1.yml", CC4_ERROR_1, CC4_WARN_1)
  end

  def test_validator_default
    trace = 300
    dir = "data/Tests/Default"
    valtest_tabulator_new(trace, dir, "JD.yml", "ED.yml", [], [])
    valtest_add_counter_count(trace, dir, "CC1.yml", [], [])
    valtest_add_counter_count(trace, dir, "CC2.yml", [], [])
    valtest_add_counter_count(trace, dir, "CC3.yml", [], [])
  end

  def test_validator_bedrock
    trace = 300
    dir = "data/Tests/Bedrock"
    valtest_tabulator_new(trace, dir, "Bedrock_JD.yml", "Bedrock_ED.yml", [], [])
    valtest_add_counter_count(trace, dir, "Bedrock_CC1.yml", [], [])
  end

  def test_validator_dc
    trace = 300
    dir = "data/Tests/DC"
    warns = ["Missing ALL Reporting Groups, None Present in Election Definition",
             "Missing ALL Expected Counts, None Present in Election Definition"]
    valtest_tabulator_new(trace, dir, "DC_EMGR_JD.yml", "DC_EMGR_ED.yml",
                              [], warns)
  end

  def test_validator_va
    trace = 300
    dir = "data/Tests/VA"
    warns = ["Missing ALL Reporting Groups, None Present in Election Definition",
             "Missing ALL Expected Counts, None Present in Election Definition"]
    valtest_tabulator_new(trace, dir, "VA_EMGR_JD.yml", "VA_EMGR_ED.yml",
                              [], warns)
  end

# Arguments:
# * <i>trace</i>:  (<i>Integer</i>) limits tracing of output for the syntax checker
# * <i>prefix</i>: (<i>String</i>) prefix of the schema file name
# * <i>file</i>:   (<i>String</i>) Tabulator data file name
#
# Returns: <i>Hash</i>
#
# Read a schema from one file (under data/Schemas/) and a datum from another
# file from <i>dir</i>/, and then tests the success of performing a syntax
# check of the datum against the schema.

  private
  def valtest_check_syntax(trace, prefix, dir, file)
    schema_file = "data/Schemas/" + "#{prefix}_schema.yml"
    schema = valtest_file_read(schema_file, "Schema")
    file = "#{dir}/#{file}"
    datum = valtest_file_read(file, "Data")
    scy = SyntaxCheckerYaml.new
    errors, messages = scy.check_syntax(schema, datum, true, trace)
    print messages unless errors.length == 0
    assert(errors.length == 0, "Check Syntax of #{file} FAILED")
    print "Check Syntax of #{file}: OK\n"
    datum
  end

# Arguments:
# * <i>trace</i>:    (<i>Integer</i>) limits tracing of output for the syntax checker
# * <i>jd_file</i>:  (<i>String</i>) name of file holding Jurisdiction Definition
# * <i>ed_file</i>:  (<i>String</i>) name of file holding Election Definition
# * <i>errors</i>:   (<i>Array</i>) of expected error messages
# * <i>warnings</i>: (<i>Array</i>) of expected warning messages
#
# Returns: N/A
#
# Tests the creation of a new Tabulator from a Jurisdiction Definition and an
# Election Definition.  The proper number of <i>errors</i> and <i>warnings</i> should
# appear, and they should match exactly, content-wise.

  def valtest_tabulator_new(trace, dir, jd_file, ed_file, errors, warnings)
    print "\nGenerating Initial Tabulator Count from Files: #{jd_file} #{ed_file}\n"
    jd = valtest_check_syntax(trace, "jurisdiction_definition", dir, jd_file)
    ed = valtest_check_syntax(trace, "election_definition", dir, ed_file)
    tab = Tabulator.new(jd, ed, TABULATOR_DATA_FILE)
    tc = tab.tabulator_count
    if (tab.validation_errors.length == 0)
      valtest_file_write_tabulator(tc)
    end
    taberrs = valtest_errors(tab.validation_errors, errors)
    tabwarns = valtest_warnings(tab.validation_warnings, warnings) 
    if (tab.validation_errors.length == 0)
      print "Initial Tabulator Count"
    else
      print "Initial Tabulator Count REJECTED"
    end
    print " with #{taberrs.to_s} ERRORS and #{tabwarns.to_s} WARNINGS\n"    
    valtest_print_errors_warnings(tab)
  end

# Arguments:
# * <i>received</i>: (<i>Array</i>) of received Tabulator error messages
# * <i>expected</i>: (<i>Array</i>) of expected error messages
#
# Returns: N/A
#
# Tests to ensure that the <i>received</i> error messages exactly match the
# <i>expected</i> error messages.

  def valtest_errors(received, expected)
    assert(expected.length == received.length,
           valtest_unsame_messages(received, expected, "Error", ERRHEAD))
    received.each_index do |i|
      assert(received[i] == expected[i],
             "Unexpected Error: #{received[i]}\n" +
             "        Expected: #{expected[i]}")
    end
    expected.length 
  end

# Arguments:
# * <i>received</i>: (<i>Array</i>) of received Tabulator warning messages
# * <i>expected</i>: (<i>Array</i>) of expected warning messages
#
# Returns: N/A
#
# Tests to ensure that the <i>received</i> warning messages exactly match the
# <i>expected</i> warning messages.

  def valtest_warnings(received, expected)
    assert(expected.length == received.length,
           valtest_unsame_messages(received, expected, "Warning", WARHEAD))
    received.each_index do |i|
      assert(received[i] == expected[i],
             "Unexpected Warning: #{received[i]}\n" +
             "          Expected: #{expected[i]}")
    end
    expected.length 
  end

# Arguments:
# * <i>received</i>: (<i>Array</i>) of received error messages
# * <i>expected</i>: (<i>Array</i>) of expected warning messages
# * <i>label</i>:    (<i>String</i>) either "Errors" or "Warnings"
# * <i>header</i>:   (<i>String</i>) either <tt><b>ERRHEAD</b></tt> or <tt><b>WARHEAD</b></tt>
#
# Returns: <i>String</i>
#
# Called only when the sets of <i>received</i> and <i>expected</i> messages
# are not of the same size.  Collects into and returns a single message
# <i>String</i> consisting of the <i>expected</i> error/warning messages
# followed by those actually <i>received</i>.

  def valtest_unsame_messages(received, expected, label, header)
    message = "Expected #{expected.length.to_s} Validation #{label}s:\n"
    message += valtest_print_messages(expected, header)
    message += "Actually Received #{received.length.to_s}:\n"
    message += valtest_print_messages(received, header)
  end
      
# Arguments:
# * <i>messages</i>: (<i>Array</i>) of error/warning messages
# * <i>header</i>: (<i>Array</i>) of error/warning messages
# * <i>printit</i>: (<i>Boolean</i>) whether to print the error/warning messages (optional)
#
# Returns: <i>String</i>
#
# Returns a <i>String</i> containing the concatenation of all of the
# error/warning <i>messages</i>, each preceded by the <i>header</i> and
# followed by a <i>newline</i> character.  If <i>printit</i> is <i>true</i>,
# the <i>messages</i> are printed before being returned.

  def valtest_print_messages(messages, header, printit = false)
    message = ""
    messages.each { |text| message += "#{header} #{text}\n"}
    print message if printit
    message
  end

# Arguments:
# * <i>tab</i>: (<i>Tabulator</i>) Tabulator object
#
# Returns: N/A
#
# Prints all error and warning messages currently held by the Tabulator.

  def valtest_print_errors_warnings(tab)
    unless (tab.validation_errors.length == 0 &&
            tab.validation_warnings.length == 0)
      print "\n" 
      valtest_print_messages(tab.validation_errors, ERRHEAD, true)
      valtest_print_messages(tab.validation_warnings, WARHEAD, true)
    end
  end

# Arguments:
# * <i>trace</i>:    (<i>Integer</i>) limits tracing of output for the syntax checker
# * <i>cc_file</i>:  (<i>String</i>) name of file holding Counter Count
# * <i>errors</i>:   (<i>Array</i>) of expected error messages
# * <i>warnings</i>: (<i>Array</i>) of expected warning messages
#
# Returns: N/A
#
# Tests the accumulation of a new Counter Count after instantiating the
# Tabulator.  The proper number of <i>errors</i> and <i>warnings</i> should
# appear, and they should match exactly, content-wise.

  def valtest_add_counter_count(trace, dir, cc_file, errors, warnings)
    tab = valtest_tabulator_instantiate(trace)
    print "\nTabulator Accumulating New Counter Count from File: #{cc_file}\n"
    cc = valtest_check_syntax(trace, "counter_count", dir, cc_file)
    tab.validate_counter_count(cc)
    tab.update_tabulator_count(cc)
    valtest_file_write_tabulator(tab.tabulator_count)
    taberrs = valtest_errors(tab.validation_errors, errors)
    tabwarns = valtest_warnings(tab.validation_warnings, warnings)
    if (tab.validation_errors.length == 0)
      print "Counter Count ACCUMULATED"
    else 
      print "Counter Count REJECTED"
    end
    print " with #{taberrs.to_s} ERRORS and #{tabwarns.to_s} WARNINGS\n"
    valtest_print_errors_warnings(tab)
  end
  
# Arguments:
# * <i>trace</i>:  (<i>Integer</i>) limits tracing of output for the syntax checker
#
# Returns: N/A
#
# Tests the instantiation of a new Tabulator from the contents of the
# <tt><b>TABULATOR_DATA_FILE</b></tt>. There should be no errors or warnings.

  def valtest_tabulator_instantiate(trace)
    tc_file = TABULATOR_DATA_FILE
    print "\nInstantiating Tabulator from File: #{tc_file}\n"
    tc = valtest_check_syntax(trace, "tabulator_count", ".", tc_file)
    tab = Tabulator.new(false, false, false, tc)
    taberrs = tab.validation_errors.length
    assert(0 == taberrs,
           "Expected NO Validation Errors, Received: #{taberrs.to_s}" +
           valtest_print_messages(tab.validation_errors, ERRHEAD))
    tabwarns = tab.validation_warnings.length
    assert(0 == tabwarns,
           "Expected NO Validation Warnings, Received: #{tabwarns.to_s}" +
           valtest_print_messages(tab.validation_warnings, WARHEAD))
    print "Tabulator Successfully Instantiated from File\n"
    tab
  end

# Arguments:
# * <i>file</i>: (<i>String</i>) file name
#
# Returns: N/A
#
# Reads and returns the contents of the <i>file</i>, while testing to ensure
# the file read operation succeeds.

  def valtest_file_read(file, label)
    print "Reading #{label}: #{file}\n"
    assert(schema = File.open(file) { |infile| YAML::load(infile) },
           "Error Reading from #{label} File: #{file}")
    schema
  end

# Arguments:
# * <i>tc</i>: (<i>Hash</i>) Tabulator Count data
#
# Returns: N/A
#
# Writes the Tabulator Count data to the <tt><b>TABULATOR_DATA_FILE</b></tt>, while
# testing to ensure that the file write operation succeeds.

  def valtest_file_write_tabulator(tc)
    file = TABULATOR_DATA_FILE
    print "Writing Tabulator Count: #{file}\n"
    assert(File.open(file, "w") { |outfile| YAML::dump(tc, outfile) },
           "Error Writing to File: #{file}")
  end

end
